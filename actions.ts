/* This file is autogenerated by liwe3-svelte */
/* eslint-disable @typescript-eslint/no-inferrable-types */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable @typescript-eslint/no-unused-vars */

/*=== f2c_start __file ===*/

/*=== f2c_end __file ===*/

import { get, patch, post, delete_, type LiWEFetcherOptions } from '$liwe3/utils/fetcher';

/**
 * Adds order in the system.
 * This function returns the full `Order` structure
 *
 * @param prod_code - Product Code [req]
 * @param qnt - Quantity to add [req]
 * @param id_user - The ID user to add the order to [req]
 *
 * @return order: Order
 *
 */
export const order_admin_add = async ( prod_code: string, qnt: number, id_user: string, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/order/admin/add`, { prod_code, qnt, id_user }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_admin_add ===*/

	/*=== f2c_end order_admin_add ===*/

	return res.order;
};

/**
 * Updates the order specified by `id`.
 * This function returns the full `Order` structure
 *
 * @param id - Order ID [req]
 * @param name - Order name [opt]
 *
 * @return order: Order
 *
 */
export const order_admin_update = async ( id: string, name?: string, _options?: LiWEFetcherOptions ) => {
	const res = await patch( `/api/order/admin/update`, { id, name }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_admin_update ===*/

	/*=== f2c_end order_admin_update ===*/

	return res.order;
};

/**
 * The call modifies one or more fields.
 * This function returns the full `Order` structure
 *
 * @param id - The order ID [req]
 * @param data - The field / value to patch [req]
 *
 * @return order: Order
 *
 */
export const order_admin_fields = async ( id: string, data: any, _options?: LiWEFetcherOptions ) => {
	const res = await patch( `/api/order/admin/fields`, { id, data }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_admin_fields ===*/

	/*=== f2c_end order_admin_fields ===*/

	return res.order;
};

/**
 * Returns all orders.
 * This function returns a list of full `Order` structure.
 * This function supports pagination.
 *
 * @param skip - First line to return [opt]
 * @param rows - How many rows to return [opt]
 *
 * @return orders: Order
 *
 */
export const order_admin_list = async ( skip: number = 0, rows: number = -1, _options?: LiWEFetcherOptions ) => {
	const res = await get( `/api/order/admin/list`, { skip, rows }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_admin_list ===*/

	/*=== f2c_end order_admin_list ===*/

	return res.orders;
};

/**
 * Deletes a order from the system.
 *
 * @param id - The order id to be deleted [req]
 *
 * @return id: str
 *
 */
export const order_admin_del = async ( id: string, _options?: LiWEFetcherOptions ) => {
	const res = await delete_( `/api/order/admin/del`, { id }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_admin_del ===*/

	/*=== f2c_end order_admin_del ===*/

	return res.id;
};

/**
 * This endpoint allows you to add tags to an order.
 *
 * @param id - The order ID [req]
 * @param tags - A list of tags to be added to the user [req]
 *
 * @return order: Order
 *
 */
export const order_admin_tag = async ( id: string, tags: string[], _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/order/admin/tag`, { id, tags }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_admin_tag ===*/

	/*=== f2c_end order_admin_tag ===*/

	return res.order;
};

/**
 * Adds a product to the current order.
 * This function returns the full `Order` structure
 *
 * @param prod_code - Product Code [req]
 * @param qnt - Quantity to add [req]
 *
 * @return order: OrderFull
 *
 */
export const order_add = async ( prod_code: string, qnt: number, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/order/add`, { prod_code, qnt }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_add ===*/

	/*=== f2c_end order_add ===*/

	return res.order;
};

/**
 * Returns all order details only if the order is `visible`.
 * The order can be identified by  `id`, `code` or `code_forn`.
 * You can pass more than a field, but one is enough.
 * This function returns the full `Order` structure
 *
 * @param id - Order unique ID [req]
 *
 * @return order: OrderFull
 *
 */
export const order_details = async ( id: string, _options?: LiWEFetcherOptions ) => {
	const res = await get( `/api/order/details`, { id }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_details ===*/

	/*=== f2c_end order_details ===*/

	return res.order;
};

/**
 * Returns all visible orders.
 * Orders with `visible` set to `false` are not shown.
 * This function returns a list of full `Order` structure.
 * This function supports pagination.
 *
 * @param rows - How many rows to return [opt]
 * @param skip - First line to return [opt]
 *
 * @return orders: Order
 *
 */
export const order_list = async ( rows: number = -1, skip: number = 0, _options?: LiWEFetcherOptions ) => {
	const res = await get( `/api/order/list`, { rows, skip }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_list ===*/

	/*=== f2c_end order_list ===*/

	return res.orders;
};

/**
 * Returns the current cart with products for the logged in user.
 * The order must be in status `new`
 *
 *
 * @return order: OrderFull
 *
 */
export const order_cart = async ( _options?: any ) => {
	const res = await get( `/api/order/cart`, {}, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_cart ===*/

	/*=== f2c_end order_cart ===*/

	return res.order;
};

/**
 * Deletes an item from an order.
 * Order must be in state `new`.
 * Only admin and order owner can delete an item from an order.
 *
 * @param id_order - The order id [req]
 * @param id_item - The item id [req]
 *
 * @return order: OrderFull
 *
 */
export const order_item_del = async ( id_order: string, id_item: string, _options?: LiWEFetcherOptions ) => {
	const res = await delete_( `/api/order/item/del`, { id_order, id_item }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_item_del ===*/

	/*=== f2c_end order_item_del ===*/

	return res.order;
};

/**
 * The `challenge` parameter is a challenge hash created composing 
 * `id_order`, `transaction_id`, `session_id`, `payment_mode` as set in the `data.json` config file under `security / remote`).
 *
 * @param id_order - The order ID [req]
 * @param challenge - The challenge verification code [req]
 * @param payment_mode - The payment mode [req]
 * @param transaction_id - The transaction ID [req]
 * @param session_id - The session ID (if any) [opt]
 *
 * @return log: OrderPaymentLog
 *
 */
export const order_transaction_start = async ( id_order: string, challenge: string, payment_mode: string, transaction_id: string, session_id?: string, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/order/transaction/start`, { 
		challenge,
		id_order,
		payment_mode,
		session_id,
		transaction_id
	 }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_transaction_start ===*/

	/*=== f2c_end order_transaction_start ===*/

	return res.log;
};

/**
 * The `challenge` parameter is a `MD5` hash created composing (`email` + `name` + `remote_secret_key` as set in the `data.json` config file under `security / remote`).
 *
 * @param challenge - The challenge verification code [req]
 * @param payment_mode - The payment mode [req]
 * @param transaction_id - The transaction ID [req]
 * @param session_id - The session ID (if any) [opt]
 * @param event_name - The event name [opt]
 * @param data - The JSON data [opt]
 *
 * @return log: OrderPaymentLog
 *
 */
export const order_transaction_update = async ( challenge: string, payment_mode: string, transaction_id: string, session_id?: string, event_name?: string, data?: any, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/order/transaction/update`, { 
		challenge,
		data,
		event_name,
		payment_mode,
		session_id,
		transaction_id
	 }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_transaction_update ===*/

	/*=== f2c_end order_transaction_update ===*/

	return res.log;
};

/**
 * Mark an order as "success"
 *
 * @param challenge - Authorization challenge [req]
 * @param transaction_id - The transaction ID [req]
 * @param session_id - The session ID (if any) [opt]
 * @param payment_mode - The payment mode [opt]
 *
 * @return order: Order
 *
 */
export const order_transaction_success = async ( challenge: string, transaction_id: string, session_id?: string, payment_mode?: string, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/order/transaction/success`, { 
		challenge,
		payment_mode,
		session_id,
		transaction_id
	 }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_transaction_success ===*/

	/*=== f2c_end order_transaction_success ===*/

	return res.order;
};

/**
 * Mark an order with "payment failed"
 *
 * @param challenge - Authorization challenge [req]
 * @param transaction_id - The transaction ID [req]
 * @param session_id - The Session ID [opt]
 * @param payment_mode - The payment mode [opt]
 *
 * @return order: Order
 *
 */
export const order_transaction_failed = async ( challenge: string, transaction_id: string, session_id?: string, payment_mode?: string, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/order/transaction/failed`, { 
		challenge,
		payment_mode,
		session_id,
		transaction_id
	 }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_transaction_failed ===*/

	/*=== f2c_end order_transaction_failed ===*/

	return res.order;
};

/**
 * @param id - The order ID [req]
 *
 * @return order: OrderFull
 *
 */
export const order_admin_details = async ( id: string, _options?: LiWEFetcherOptions ) => {
	const res = await get( `/api/order/admin/details`, { id }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_admin_details ===*/

	/*=== f2c_end order_admin_details ===*/

	return res.order;
};

/**
 * Deletes a order from the system for real (removing everything from the database)
 *
 * @param id - The order id to be deleted [req]
 *
 * @return id: str
 *
 */
export const order_admin_del_real = async ( id: string, _options?: LiWEFetcherOptions ) => {
	const res = await delete_( `/api/order/admin/del/real`, { id }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_admin_del_real ===*/

	/*=== f2c_end order_admin_del_real ===*/

	return res.id;
};

/**
 * Only the current user that owns the order can add notes to the order itself.
 *
 * @param id - Order ID [req]
 * @param notes - Order notes [req]
 *
 * @return order: Order
 *
 */
export const order_notes_add = async ( id: string, notes: string, _options?: LiWEFetcherOptions ) => {
	const res = await post( `/api/order/notes/add`, { id, notes }, _options?.skipError ? _options.skipError : false );

	if (res.error) return res;

	/*=== f2c_start order_notes_add ===*/

	/*=== f2c_end order_notes_add ===*/

	return res.order;
};
